{"version":3,"sources":["Effects.jsx","index.jsx"],"names":["_load","SMAAImageLoader","prototype","load","_","set","bind","this","Thing","ref","useRef","useFrame","current","rotation","z","onClick","e","console","log","onPointerOver","onPointerOut","attach","args","color","opacity","transparent","App","mouse","onMouseMove","useCallback","clientX","x","clientY","y","window","innerWidth","innerHeight","style","width","height","ReactDOM","render","document","getElementById"],"mappings":"0PAKA,MAAMA,EAAQC,IAAgBC,UAAUC,KACxCF,IAAgBC,UAAUC,KAAO,SAASC,EAAGC,GAC3C,OAAOL,EAAMM,KAAKC,KAAXP,CAAiBK,I,MCC1B,MAAMG,EAAQ,KACZ,MAAMC,EAAMC,mBAMZ,OAJAC,YAAS,KACPF,EAAIG,QAAQC,SAASC,GAAK,MAI1B,0BACEL,IAAKA,EACLM,QAASC,GAAKC,QAAQC,IAAI,SAC1BC,cAAeH,GAAKC,QAAQC,IAAI,SAChCE,aAAcJ,GAAKC,QAAQC,IAAI,YAE/B,yCAAqBG,OAAO,WAAWC,KAAM,CAAC,EAAG,KACjD,uCACED,OAAO,WACPE,MAAM,UACNC,QAAS,GACTC,aAAW,MAMnB,SAASC,IACP,MAAMC,EAAQjB,iBAAO,CAAC,EAAG,IACnBkB,EAAcC,sBAAY,EAAGC,QAASC,EAAGC,QAASC,KAASN,EAAMf,QAAU,CAACmB,EAAIG,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,GAAK,IAC3I,OACE,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUX,YAAaA,GAC1D,kBAAC,IAAD,KACE,kBAACpB,EAAD,QAMRgC,IAASC,OAAO,kBAACf,EAAD,MAASgB,SAASC,eAAe,W","file":"static/js/main.b389cb67.chunk.js","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useLoader, useThree, useFrame } from 'react-three-fiber'\nimport { SMAAImageLoader, BlendFunction, EffectComposer, EffectPass, RenderPass, SMAAEffect, SSAOEffect, NormalPass } from 'postprocessing'\n\n// Fix smaa loader signature\nconst _load = SMAAImageLoader.prototype.load\nSMAAImageLoader.prototype.load = function(_, set) {\n  return _load.bind(this)(set)\n}\n\nexport default function Post() {\n  const { gl, scene, camera, size } = useThree()\n  const smaa = useLoader(SMAAImageLoader)\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n    const smaaEffect = new SMAAEffect(...smaa)\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1)\n    const normalPass = new NormalPass(scene, camera)\n    const ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n      blendFunction: BlendFunction.MULTIPLY,\n      samples: 30,\n      rings: 4,\n      distanceThreshold: 1, // Render distance depends on camera near&far.\n      distanceFalloff: 0.0, // No need for falloff.\n      rangeThreshold: 0.05, // Larger value works better for this camera frustum.\n      rangeFalloff: 0.01,\n      luminanceInfluence: 0.6,\n      radius: 30,\n      scale: 0.55,\n      bias: 0.5\n    })\n    const effectPass = new EffectPass(camera, smaaEffect, ssaoEffect)\n    effectPass.renderToScreen = true\n    composer.addPass(normalPass)\n    composer.addPass(effectPass)\n    return composer\n  }, [])\n\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useCallback, useRef, useMemo } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport Effects from './Effects'\nimport './styles.css'\n\n\nconst Thing = () => {\n  const ref = useRef();\n\n  useFrame(() => {\n    ref.current.rotation.z += 0.01;\n  });\n\n  return (\n    <mesh\n      ref={ref}\n      onClick={e => console.log('click')}\n      onPointerOver={e => console.log('hover')}\n      onPointerOut={e => console.log('unhover')}\n    >\n      <planeBufferGeometry attach='geometry' args={[1, 1]} />\n      <meshBasicMaterial\n        attach='material'\n        color='hotpink'\n        opacity={0.5}\n        transparent\n      />\n    </mesh>\n  );\n};\n\nfunction App() {\n  const mouse = useRef([0, 0])\n  const onMouseMove = useCallback(({ clientX: x, clientY: y }) => (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]), [])\n  return (\n    <div style={{ width: '100%', height: '100%' }} onMouseMove={onMouseMove}>\n      <Canvas>\n        <Thing />\n      </Canvas>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}