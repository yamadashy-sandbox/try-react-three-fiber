{"version":3,"sources":["Effects.jsx","index.jsx"],"names":["_load","SMAAImageLoader","prototype","load","Post","useThree","gl","scene","camera","size","smaa","useLoader","composer","useMemo","EffectComposer","addPass","RenderPass","smaaEffect","SMAAEffect","colorEdgesMaterial","setEdgeDetectionThreshold","normalPass","NormalPass","ssaoEffect","SSAOEffect","renderTarget","texture","blendFunction","BlendFunction","MULTIPLY","samples","rings","distanceThreshold","distanceFalloff","rangeThreshold","rangeFalloff","luminanceInfluence","radius","scale","bias","effectPass","EffectPass","renderToScreen","useEffect","setSize","width","height","useFrame","_","delta","render","set","bind","this","Swarm","count","mouse","mesh","useRef","dummy","THREE","particles","temp","i","t","Math","random","factor","speed","xFactor","yFactor","zFactor","push","mx","my","state","forEach","particle","a","cos","sin","b","s","max","current","position","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","attach","color","App","onMouseMove","useCallback","clientX","x","clientY","y","window","innerWidth","innerHeight","style","alpha","antialias","logarithmicDepthBuffer","fov","onCreated","setClearColor","toneMapping","outputEncoding","intensity","fallback","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a511d1dc.chunk.js","sourcesContent":["import { useMemo, useEffect } from 'react'\nimport { useLoader, useThree, useFrame } from 'react-three-fiber'\nimport { SMAAImageLoader, BlendFunction, EffectComposer, EffectPass, RenderPass, SMAAEffect, SSAOEffect, NormalPass } from 'postprocessing'\n\n// Fix smaa loader signature\nconst _load = SMAAImageLoader.prototype.load\nSMAAImageLoader.prototype.load = function(_, set) {\n  return _load.bind(this)(set)\n}\n\nexport default function Post() {\n  const { gl, scene, camera, size } = useThree()\n  const smaa = useLoader(SMAAImageLoader)\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n    const smaaEffect = new SMAAEffect(...smaa)\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1)\n    const normalPass = new NormalPass(scene, camera)\n    const ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n      blendFunction: BlendFunction.MULTIPLY,\n      samples: 30,\n      rings: 4,\n      distanceThreshold: 1, // Render distance depends on camera near&far.\n      distanceFalloff: 0.0, // No need for falloff.\n      rangeThreshold: 0.05, // Larger value works better for this camera frustum.\n      rangeFalloff: 0.01,\n      luminanceInfluence: 0.6,\n      radius: 30,\n      scale: 0.55,\n      bias: 0.5\n    })\n    const effectPass = new EffectPass(camera, smaaEffect, ssaoEffect)\n    effectPass.renderToScreen = true\n    composer.addPass(normalPass)\n    composer.addPass(effectPass)\n    return composer\n  }, [])\n\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useCallback, useRef, useMemo } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport Effects from './Effects'\nimport './styles.css'\n\nfunction Swarm({ count, mouse }) {\n  const mesh = useRef()\n  const dummy = useMemo(() => new THREE.Object3D(), [])\n\n  const particles = useMemo(() => {\n    const temp = []\n    for (let i = 0; i < count; i++) {\n      const t = Math.random() * 100\n      const factor = 20 + Math.random() * 100\n      const speed = 0.01 + Math.random() / 200\n      const xFactor = -20 + Math.random() * 40\n      const yFactor = -20 + Math.random() * 40\n      const zFactor = -20 + Math.random() * 40\n      temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n    }\n    return temp\n  }, [count])\n\n  useFrame(state => {\n    particles.forEach((particle, i) => {\n      let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n      t = particle.t += speed / 2\n      const a = Math.cos(t) + Math.sin(t * 1) / 10\n      const b = Math.sin(t) + Math.cos(t * 2) / 10\n      const s = Math.max(1.5, Math.cos(t) * 5)\n      particle.mx += (mouse.current[0] - particle.mx) * 0.02\n      particle.my += (-mouse.current[1] - particle.my) * 0.02\n      dummy.position.set(\n        (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n        (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n        (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n      )\n      dummy.scale.set(s, s, s)\n      dummy.updateMatrix()\n      mesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    mesh.current.instanceMatrix.needsUpdate = true\n  })\n\n  return (\n    <>\n      <instancedMesh ref={mesh} args={[null, null, count]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[1, 32, 32]} />\n        <meshPhongMaterial attach=\"material\" color=\"white\" />\n      </instancedMesh>\n    </>\n  )\n}\n\nfunction App() {\n  const mouse = useRef([0, 0])\n  const onMouseMove = useCallback(({ clientX: x, clientY: y }) => (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]), [])\n  return (\n    <div style={{ width: '100%', height: '100%' }} onMouseMove={onMouseMove}>\n      <Canvas\n        gl={{ alpha: false, antialias: false, logarithmicDepthBuffer: true }}\n        camera={{ fov: 75, position: [0, 0, 70] }}\n        onCreated={({ gl }) => {\n          gl.setClearColor('white')\n          gl.toneMapping = THREE.ACESFilmicToneMapping\n          gl.outputEncoding = THREE.sRGBEncoding\n        }}>\n        <ambientLight intensity={1.1} />\n        <pointLight position={[100, 100, 100]} intensity={2.2} />\n        <pointLight position={[-100, -100, -100]} intensity={5} color=\"red\" />\n        <Swarm mouse={mouse} count={150} />\n        <Suspense fallback={null}>\n          <Effects />\n        </Suspense>\n      </Canvas>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}